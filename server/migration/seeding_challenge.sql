-- SQLBook: Code
BEGIN;

TRUNCATE TABLE challenge CASCADE;

INSERT INTO challenge (title, description, instruction, precode) VALUES
('Ta première fonction', 'Qu''est ce qu''une fonction ? Une fonction est un ensemble d''instructions qui prend des paramètres et les transforme en une valeur de retour ou agit dessus', 'Écris une fonction qui prend un nombre comme paramètre et qui retourne le double de ce nombre.', '@input n is a number BREAK @output is a number BREAK function dooouble(n) { BREAK  BREAK }'),
('La longueur d''un mot', 'La propriété length permet de retourner la longueur d''une chaîne de caractère ou d''un tableau', 'Écris une fonction qui prend un mot comme paramètre et qui retourne le nombre de caractères de ce mot.', '@input word is a string BREAK @output is a number BREAK function WordLength(word) { BREAK  BREAK }'),
('Les chaînes de caractères', 'Une chaine de caractère est une valeur contenue dans des guillements ("), apostrophes (''), ou backticks (`). Tu peux ajouter des variables dans une chaine de caractère en utilisant ${} dans des backticks ``', 'Écris une fonction qui prend un prénom, un nom et un âge en argument et qui retourne la phrase "Bonjour, je m''appelle [prénom] [nom] et j''ai [age] ans"', '@input firstname is a string BREAK @input lastname is a string BREAK @input age is a number BREAK @output is a string BREAK function Hello(firstname, lastname, age) { BREAK  BREAK }'),
('Transformer les valeurs d''un tableau', 'La méthode arr.map() crée un nouveau tableau avec les résultats de l''appel d''une fonction fournie sur chaque élément du tableau appelant.', 'Écris une fonction qui augmente la valeur de chaque élément du tableau de 20%. Cette fonction peut être utile si tu veux ajouter la TVA sur une liste de prix HT', '@input prices is an array of number BREAK @output is an array of number BREAK function priceTTC(prices) { BREAK  BREAK }'),
('Trouver des valeurs dans un tableau', 'La méthode arr.filter() crée et retourne un nouveau tableau contenant tous les éléments du tableau d''origine qui remplissent une condition déterminée par une fonction.', 'Écris une fonction qui filtre les éléments du tableau inférieurs ou égaux à un budget (passé en paramètre de la fonction). Cela peut être utile pour ressortir les prix d''éléments achetables inférieur à ton budget.', '@input prices is an array of number BREAK @input budget is a number BREAK @output is an array of number BREAK function pricesAffordable(prices,budget) { BREAK  BREAK }'),
('La disparition', 'Un peu de manipulation de chaîne de caractère', 'Écris une fonction qui prend une chaîne de caractère comme argument et qui retourne cette même chaîne avec aucune lettre "e"', '@input n is a string BREAK @output is a string BREAK function removeE(string) { BREAK  BREAK }'),
('Les structures conditionnelles', 'L''instruction if exécute une instruction si une condition donnée est vraie ou équivalente à vrai. Si la condition n''est pas vérifiée, il est possible d''utiliser une autre instruction', 'Écris une fonction qui prend un nombre comme paramètre et qui renvoie la chaîne de caractère "success" si le nombre est strictement supérieur à 100. Sinon il renvoie "fail"', '@input n is a number BREAK @output is a string BREAK function testScore(n) { BREAK  BREAK }'),
('==', 'L''opérateur d''égalité (==) vérifie si ses deux opérandes sont égaux et renvoie un booléen indiquant le résultat de la comparaison.', 'Écris une fonction qui prend deux nombres comme paramètres et qui renvoie le booléen "true" si ces deux nombres sont égaux. Sinon elle renvoie "false".', '@input a is a number BREAK @input b is a number BREAK @output is a boolean BREAK function equals(a, b) { BREAK  BREAK }');

INSERT INTO keyword (label) VALUES 
('n'),
('return'),
('*'),
('2'), -- 1  / 4
('return'),
('.'),
('length'),
('word'), -- 2 /  8
('firstname'),
('lastname'),
('age'),
('``'),
('${}'),
('return'), -- 3 /  14
('prices'),
('map('),
(')'),
('=>'),
('.'),
('*'),
('1.2'),
('price'),
('return'), -- 4 / 23
('prices'),
('filter('),
(')'),
('=>'),
('.'),
('<='),
('price'),
('budget'),
('return'), -- 5 / 32
('return'),
('string'),
('replaceAll('),
(')'),
('"e"'),
('.'),
(','),
('""'), -- 6 / 40
('return'),
('n'),
('>'),
(')'),
('if('),
('100'),
('{'),
('}'),
('else'),
('"fail"'),
('"success"'), -- 7 / 51 
('return'),
('a'),
('=='),
('b'); -- 8 / 55

INSERT INTO challenge_has_keyword (challenge_id, keyword_id) VALUES 
(1, 1),
(1, 2),
(1, 3),
(1, 4),
(2, 5),
(2, 6),
(2, 7),
(2, 8),
(3, 9),
(3, 10),
(3, 11),
(3, 12),
(3, 13),
(3, 14),
(4, 15),
(4, 16),
(4, 17),
(4, 18),
(4, 19),
(4, 20),
(4, 21),
(4, 22),
(4, 23),
(5, 24),
(5, 25),
(5, 26),
(5, 27),
(5, 28),
(5, 29),
(5, 30), 
(5, 31),
(5, 32),
(6, 33),
(6, 34),
(6, 35),
(6, 36),
(6, 37),
(6, 38),
(6, 39),
(6, 40),
(7, 41),
(7, 42),
(7, 43),
(7, 44),
(7, 45),
(7, 46),
(7, 47),
(7, 48),
(7, 49),
(7, 50),
(7, 51),
(8, 52),
(8, 53),
(8, 54),
(8, 55);

INSERT INTO type (label) VALUES 
('number'),
('string'),
('array'),
('boolean'),
('object');

INSERT INTO output (value, type_id, challenge_id) VALUES
('4', 1, 1), 
('6', 1, 1), 
('10', 1, 1), 
('10', 1, 2), 
('1', 1, 2), 
('3', 1, 2),
('Bonjour, je m''appelle Albus Dumbledore et j''ai 108 ans', 2, 3),
('Bonjour, je m''appelle Homer Simpson et j''ai 40 ans', 2, 3),
('Bonjour, je m''appelle Anakin Skywalker et j''ai 31 ans', 2, 3),
('[4.8, 8.4, 16.8]', 3, 4),
('[6.24, 9.6, 18]', 3, 4),
('[10.92, 960000, 18000000]', 3, 4),
('[3, 7]', 3, 5),
('[5.2, 8]', 3, 5),
('[]', 3, 5),
('Cours Forrst, cours', 2, 6),
('Hasta la vista, baby', 2, 6),
('J jur solnnllmnt qu ms intntions sont mauvaiss', 2, 6),
('success', 2, 7),
('fail', 2, 7),
('fail', 2, 7),
('true', 4, 8),
('false', 4, 8),
('false', 4, 8);

INSERT INTO input (value, ordonned, type_id, output_id) VALUES
('2', 1, 1, 1), 
('3', 1, 1, 2), 
('5', 1, 1, 3),
('Javascript', 1, 2, 4), 
('>', 1, 2, 5), 
('php', 1, 2, 6),
('Albus', 1, 2, 7),
('Dumbledore', 2, 2, 7),
('108', 3, 1, 7),
('Homer', 1, 2, 8),
('Simpson', 2, 2, 8),
('40', 3, 1, 8),
('Anakin', 1, 2, 9),
('Skywalker', 2, 2, 9),
('31', 3, 1, 9),
('[4, 7, 14]', 1, 3, 10),
('[5.2, 8, 15]', 1, 3, 11),
('[9.1, 800000, 15000000]', 1, 3, 12),
('[3, 7, 120000000000000]', 1, 3, 13),
('110000000000000', 2, 1, 13),
('[5.2, 8, 15]', 1, 3, 14),
('8', 2, 1, 14),
('[9.1, 800000, 15000000]', 1, 3, 15),
('5', 2, 1, 15),
('Cours Forrest, cours', 1, 2, 16),
('Hasta la vista, baby', 1, 2, 17),
('Je jure solennellement que mes intentions sont mauvaises', 1, 2, 18),
('110', 1, 1, 19),
('100', 1, 1, 20),
('50', 1, 1, 21),
('5', 1, 1, 22),
('5', 2, 1, 22),
('6', 1, 1, 23),
('7', 2, 1, 23),
('8', 1, 1, 24),
('12', 2, 1, 24);


COMMIT;